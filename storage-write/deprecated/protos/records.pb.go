// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: records.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot              *int64  `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	BlockHash         *string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp    *int64  `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	Height            *int64  `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	PreviousBlockHash *string `protobuf:"bytes,5,opt,name=previous_block_hash,json=previousBlockHash" json:"previous_block_hash,omitempty"`
	TransactionCount  *int64  `protobuf:"varint,6,opt,name=transaction_count,json=transactionCount" json:"transaction_count,omitempty"`
	LeaderReward      *int64  `protobuf:"varint,7,opt,name=leader_reward,json=leaderReward" json:"leader_reward,omitempty"`
	Leader            *string `protobuf:"bytes,8,opt,name=leader" json:"leader,omitempty"`
}

func (x *BlockRecord) Reset() {
	*x = BlockRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRecord) ProtoMessage() {}

func (x *BlockRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRecord.ProtoReflect.Descriptor instead.
func (*BlockRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{0}
}

func (x *BlockRecord) GetSlot() int64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *BlockRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *BlockRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *BlockRecord) GetHeight() int64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *BlockRecord) GetPreviousBlockHash() string {
	if x != nil && x.PreviousBlockHash != nil {
		return *x.PreviousBlockHash
	}
	return ""
}

func (x *BlockRecord) GetTransactionCount() int64 {
	if x != nil && x.TransactionCount != nil {
		return *x.TransactionCount
	}
	return 0
}

func (x *BlockRecord) GetLeaderReward() int64 {
	if x != nil && x.LeaderReward != nil {
		return *x.LeaderReward
	}
	return 0
}

func (x *BlockRecord) GetLeader() string {
	if x != nil && x.Leader != nil {
		return *x.Leader
	}
	return ""
}

type BlockRewardRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot      *int64  `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash      *string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp *int64  `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	Commission     *uint64 `protobuf:"varint,4,opt,name=commission" json:"commission,omitempty"`
	Lamports       *int64  `protobuf:"varint,5,opt,name=lamports" json:"lamports,omitempty"`
	PostBalance    *uint64 `protobuf:"varint,6,opt,name=post_balance,json=postBalance" json:"post_balance,omitempty"`
	Pubkey         *string `protobuf:"bytes,7,opt,name=pubkey" json:"pubkey,omitempty"`
	RewardType     *string `protobuf:"bytes,8,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
}

func (x *BlockRewardRecord) Reset() {
	*x = BlockRewardRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRewardRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRewardRecord) ProtoMessage() {}

func (x *BlockRewardRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRewardRecord.ProtoReflect.Descriptor instead.
func (*BlockRewardRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{1}
}

func (x *BlockRewardRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *BlockRewardRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *BlockRewardRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *BlockRewardRecord) GetCommission() uint64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *BlockRewardRecord) GetLamports() int64 {
	if x != nil && x.Lamports != nil {
		return *x.Lamports
	}
	return 0
}

func (x *BlockRewardRecord) GetPostBalance() uint64 {
	if x != nil && x.PostBalance != nil {
		return *x.PostBalance
	}
	return 0
}

func (x *BlockRewardRecord) GetPubkey() string {
	if x != nil && x.Pubkey != nil {
		return *x.Pubkey
	}
	return ""
}

func (x *BlockRewardRecord) GetRewardType() string {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return ""
}

type TransactionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot            *int64                      `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash            *string                     `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp       *int64                      `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	RecentBlockHash      *string                     `protobuf:"bytes,4,opt,name=recent_block_hash,json=recentBlockHash" json:"recent_block_hash,omitempty"`
	Signature            *string                     `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	Index                *int64                      `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
	Fee                  *uint64                     `protobuf:"varint,7,opt,name=fee" json:"fee,omitempty"`
	Status               *string                     `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	Err                  *string                     `protobuf:"bytes,9,opt,name=err" json:"err,omitempty"`
	ComputeUnitsConsumed *uint64                     `protobuf:"varint,10,opt,name=compute_units_consumed,json=computeUnitsConsumed" json:"compute_units_consumed,omitempty"`
	Accounts             []*TransactionAccountRecord `protobuf:"bytes,11,rep,name=accounts" json:"accounts,omitempty"`
	LogMessages          []string                    `protobuf:"bytes,12,rep,name=log_messages,json=logMessages" json:"log_messages,omitempty"`
	BalanceChanges       []*BalanceChangeRecord      `protobuf:"bytes,13,rep,name=balance_changes,json=balanceChanges" json:"balance_changes,omitempty"`
	PreTokenBalances     []*TokenBalanceRecord       `protobuf:"bytes,14,rep,name=pre_token_balances,json=preTokenBalances" json:"pre_token_balances,omitempty"`
	PostTokenBalances    []*TokenBalanceRecord       `protobuf:"bytes,15,rep,name=post_token_balances,json=postTokenBalances" json:"post_token_balances,omitempty"`
}

func (x *TransactionRecord) Reset() {
	*x = TransactionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionRecord) ProtoMessage() {}

func (x *TransactionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionRecord.ProtoReflect.Descriptor instead.
func (*TransactionRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *TransactionRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *TransactionRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *TransactionRecord) GetRecentBlockHash() string {
	if x != nil && x.RecentBlockHash != nil {
		return *x.RecentBlockHash
	}
	return ""
}

func (x *TransactionRecord) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *TransactionRecord) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TransactionRecord) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TransactionRecord) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *TransactionRecord) GetErr() string {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return ""
}

func (x *TransactionRecord) GetComputeUnitsConsumed() uint64 {
	if x != nil && x.ComputeUnitsConsumed != nil {
		return *x.ComputeUnitsConsumed
	}
	return 0
}

func (x *TransactionRecord) GetAccounts() []*TransactionAccountRecord {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *TransactionRecord) GetLogMessages() []string {
	if x != nil {
		return x.LogMessages
	}
	return nil
}

func (x *TransactionRecord) GetBalanceChanges() []*BalanceChangeRecord {
	if x != nil {
		return x.BalanceChanges
	}
	return nil
}

func (x *TransactionRecord) GetPreTokenBalances() []*TokenBalanceRecord {
	if x != nil {
		return x.PreTokenBalances
	}
	return nil
}

func (x *TransactionRecord) GetPostTokenBalances() []*TokenBalanceRecord {
	if x != nil {
		return x.PostTokenBalances
	}
	return nil
}

type TransactionAccountRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey   *string `protobuf:"bytes,1,opt,name=pubkey" json:"pubkey,omitempty"`
	Signer   *bool   `protobuf:"varint,2,opt,name=signer" json:"signer,omitempty"`
	Writable *bool   `protobuf:"varint,3,opt,name=writable" json:"writable,omitempty"`
}

func (x *TransactionAccountRecord) Reset() {
	*x = TransactionAccountRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAccountRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAccountRecord) ProtoMessage() {}

func (x *TransactionAccountRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAccountRecord.ProtoReflect.Descriptor instead.
func (*TransactionAccountRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionAccountRecord) GetPubkey() string {
	if x != nil && x.Pubkey != nil {
		return *x.Pubkey
	}
	return ""
}

func (x *TransactionAccountRecord) GetSigner() bool {
	if x != nil && x.Signer != nil {
		return *x.Signer
	}
	return false
}

func (x *TransactionAccountRecord) GetWritable() bool {
	if x != nil && x.Writable != nil {
		return *x.Writable
	}
	return false
}

type BalanceChangeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Before  *uint64 `protobuf:"varint,2,opt,name=before" json:"before,omitempty"`
	After   *uint64 `protobuf:"varint,3,opt,name=after" json:"after,omitempty"`
}

func (x *BalanceChangeRecord) Reset() {
	*x = BalanceChangeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChangeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChangeRecord) ProtoMessage() {}

func (x *BalanceChangeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChangeRecord.ProtoReflect.Descriptor instead.
func (*BalanceChangeRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{4}
}

func (x *BalanceChangeRecord) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *BalanceChangeRecord) GetBefore() uint64 {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return 0
}

func (x *BalanceChangeRecord) GetAfter() uint64 {
	if x != nil && x.After != nil {
		return *x.After
	}
	return 0
}

type TokenBalanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountIndex *int64  `protobuf:"varint,1,opt,name=account_index,json=accountIndex" json:"account_index,omitempty"`
	Mint         *string `protobuf:"bytes,2,opt,name=mint" json:"mint,omitempty"`
	Owner        *string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Amount       *string `protobuf:"bytes,4,opt,name=amount" json:"amount,omitempty"`
	Decimals     *int64  `protobuf:"varint,5,opt,name=decimals" json:"decimals,omitempty"`
}

func (x *TokenBalanceRecord) Reset() {
	*x = TokenBalanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalanceRecord) ProtoMessage() {}

func (x *TokenBalanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalanceRecord.ProtoReflect.Descriptor instead.
func (*TokenBalanceRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{5}
}

func (x *TokenBalanceRecord) GetAccountIndex() int64 {
	if x != nil && x.AccountIndex != nil {
		return *x.AccountIndex
	}
	return 0
}

func (x *TokenBalanceRecord) GetMint() string {
	if x != nil && x.Mint != nil {
		return *x.Mint
	}
	return ""
}

func (x *TokenBalanceRecord) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *TokenBalanceRecord) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *TokenBalanceRecord) GetDecimals() int64 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

type InstructionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot       *int64          `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash       *string         `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp  *int64          `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	TxSignature     *string         `protobuf:"bytes,4,opt,name=tx_signature,json=txSignature" json:"tx_signature,omitempty"`
	Index           *int64          `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	ParentIndex     *int64          `protobuf:"varint,6,opt,name=parent_index,json=parentIndex" json:"parent_index,omitempty"`
	Accounts        []string        `protobuf:"bytes,7,rep,name=accounts" json:"accounts,omitempty"`
	Data            *string         `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	Parsed          *string         `protobuf:"bytes,9,opt,name=parsed" json:"parsed,omitempty"`
	Program         *string         `protobuf:"bytes,10,opt,name=program" json:"program,omitempty"`
	ProgramId       *string         `protobuf:"bytes,11,opt,name=program_id,json=programId" json:"program_id,omitempty"`
	InstructionType *string         `protobuf:"bytes,12,opt,name=instruction_type,json=instructionType" json:"instruction_type,omitempty"`
	Params          []*ParamsRecord `protobuf:"bytes,13,rep,name=params" json:"params,omitempty"`
}

func (x *InstructionRecord) Reset() {
	*x = InstructionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionRecord) ProtoMessage() {}

func (x *InstructionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionRecord.ProtoReflect.Descriptor instead.
func (*InstructionRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{6}
}

func (x *InstructionRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *InstructionRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *InstructionRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *InstructionRecord) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *InstructionRecord) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *InstructionRecord) GetParentIndex() int64 {
	if x != nil && x.ParentIndex != nil {
		return *x.ParentIndex
	}
	return 0
}

func (x *InstructionRecord) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *InstructionRecord) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *InstructionRecord) GetParsed() string {
	if x != nil && x.Parsed != nil {
		return *x.Parsed
	}
	return ""
}

func (x *InstructionRecord) GetProgram() string {
	if x != nil && x.Program != nil {
		return *x.Program
	}
	return ""
}

func (x *InstructionRecord) GetProgramId() string {
	if x != nil && x.ProgramId != nil {
		return *x.ProgramId
	}
	return ""
}

func (x *InstructionRecord) GetInstructionType() string {
	if x != nil && x.InstructionType != nil {
		return *x.InstructionType
	}
	return ""
}

func (x *InstructionRecord) GetParams() []*ParamsRecord {
	if x != nil {
		return x.Params
	}
	return nil
}

type ParamsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ParamsRecord) Reset() {
	*x = ParamsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamsRecord) ProtoMessage() {}

func (x *ParamsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamsRecord.ProtoReflect.Descriptor instead.
func (*ParamsRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{7}
}

func (x *ParamsRecord) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ParamsRecord) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type AccountRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot            *int64                   `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash            *string                  `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp       *int64                   `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	TxSignature          *string                  `protobuf:"bytes,4,opt,name=tx_signature,json=txSignature" json:"tx_signature,omitempty"`
	RetrievalTimestamp   *int64                   `protobuf:"varint,5,opt,name=retrieval_timestamp,json=retrievalTimestamp" json:"retrieval_timestamp,omitempty"`
	Pubkey               *string                  `protobuf:"bytes,6,opt,name=pubkey" json:"pubkey,omitempty"`
	Executable           *bool                    `protobuf:"varint,7,opt,name=executable" json:"executable,omitempty"`
	Lamports             *uint64                  `protobuf:"varint,8,opt,name=lamports" json:"lamports,omitempty"`
	Owner                *string                  `protobuf:"bytes,9,opt,name=owner" json:"owner,omitempty"`
	RentEpoch            *int64                   `protobuf:"varint,10,opt,name=rent_epoch,json=rentEpoch" json:"rent_epoch,omitempty"`
	Program              *string                  `protobuf:"bytes,11,opt,name=program" json:"program,omitempty"`
	Space                *int64                   `protobuf:"varint,12,opt,name=space" json:"space,omitempty"`
	AccountType          *string                  `protobuf:"bytes,13,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	IsNative             *bool                    `protobuf:"varint,14,opt,name=is_native,json=isNative" json:"is_native,omitempty"`
	Mint                 *string                  `protobuf:"bytes,15,opt,name=mint" json:"mint,omitempty"`
	State                *string                  `protobuf:"bytes,16,opt,name=state" json:"state,omitempty"`
	TokenAmount          *uint64                  `protobuf:"varint,17,opt,name=token_amount,json=tokenAmount" json:"token_amount,omitempty"`
	TokenAmountDecimals  *int64                   `protobuf:"varint,18,opt,name=token_amount_decimals,json=tokenAmountDecimals" json:"token_amount_decimals,omitempty"`
	ProgramData          *string                  `protobuf:"bytes,19,opt,name=program_data,json=programData" json:"program_data,omitempty"`
	AuthorizedVoters     []*AuthorizedVoterRecord `protobuf:"bytes,20,rep,name=authorized_voters,json=authorizedVoters" json:"authorized_voters,omitempty"`
	AuthorizedWithdrawer *string                  `protobuf:"bytes,21,opt,name=authorized_withdrawer,json=authorizedWithdrawer" json:"authorized_withdrawer,omitempty"`
	PriorVoters          []*PriorVoterRecord      `protobuf:"bytes,22,rep,name=prior_voters,json=priorVoters" json:"prior_voters,omitempty"`
	NodePubkey           *string                  `protobuf:"bytes,23,opt,name=node_pubkey,json=nodePubkey" json:"node_pubkey,omitempty"`
	Commission           *int64                   `protobuf:"varint,24,opt,name=commission" json:"commission,omitempty"`
	EpochCredits         []*EpochCreditRecord     `protobuf:"bytes,25,rep,name=epoch_credits,json=epochCredits" json:"epoch_credits,omitempty"`
	Votes                []*VoteRecord            `protobuf:"bytes,26,rep,name=votes" json:"votes,omitempty"`
	RootSlot             *int64                   `protobuf:"varint,27,opt,name=root_slot,json=rootSlot" json:"root_slot,omitempty"`
	LastTimestamp        []*TimestampRecord       `protobuf:"bytes,28,rep,name=last_timestamp,json=lastTimestamp" json:"last_timestamp,omitempty"`
	Data                 []*DataRecord            `protobuf:"bytes,29,rep,name=data" json:"data,omitempty"`
}

func (x *AccountRecord) Reset() {
	*x = AccountRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRecord) ProtoMessage() {}

func (x *AccountRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRecord.ProtoReflect.Descriptor instead.
func (*AccountRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{8}
}

func (x *AccountRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *AccountRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *AccountRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *AccountRecord) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *AccountRecord) GetRetrievalTimestamp() int64 {
	if x != nil && x.RetrievalTimestamp != nil {
		return *x.RetrievalTimestamp
	}
	return 0
}

func (x *AccountRecord) GetPubkey() string {
	if x != nil && x.Pubkey != nil {
		return *x.Pubkey
	}
	return ""
}

func (x *AccountRecord) GetExecutable() bool {
	if x != nil && x.Executable != nil {
		return *x.Executable
	}
	return false
}

func (x *AccountRecord) GetLamports() uint64 {
	if x != nil && x.Lamports != nil {
		return *x.Lamports
	}
	return 0
}

func (x *AccountRecord) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *AccountRecord) GetRentEpoch() int64 {
	if x != nil && x.RentEpoch != nil {
		return *x.RentEpoch
	}
	return 0
}

func (x *AccountRecord) GetProgram() string {
	if x != nil && x.Program != nil {
		return *x.Program
	}
	return ""
}

func (x *AccountRecord) GetSpace() int64 {
	if x != nil && x.Space != nil {
		return *x.Space
	}
	return 0
}

func (x *AccountRecord) GetAccountType() string {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ""
}

func (x *AccountRecord) GetIsNative() bool {
	if x != nil && x.IsNative != nil {
		return *x.IsNative
	}
	return false
}

func (x *AccountRecord) GetMint() string {
	if x != nil && x.Mint != nil {
		return *x.Mint
	}
	return ""
}

func (x *AccountRecord) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *AccountRecord) GetTokenAmount() uint64 {
	if x != nil && x.TokenAmount != nil {
		return *x.TokenAmount
	}
	return 0
}

func (x *AccountRecord) GetTokenAmountDecimals() int64 {
	if x != nil && x.TokenAmountDecimals != nil {
		return *x.TokenAmountDecimals
	}
	return 0
}

func (x *AccountRecord) GetProgramData() string {
	if x != nil && x.ProgramData != nil {
		return *x.ProgramData
	}
	return ""
}

func (x *AccountRecord) GetAuthorizedVoters() []*AuthorizedVoterRecord {
	if x != nil {
		return x.AuthorizedVoters
	}
	return nil
}

func (x *AccountRecord) GetAuthorizedWithdrawer() string {
	if x != nil && x.AuthorizedWithdrawer != nil {
		return *x.AuthorizedWithdrawer
	}
	return ""
}

func (x *AccountRecord) GetPriorVoters() []*PriorVoterRecord {
	if x != nil {
		return x.PriorVoters
	}
	return nil
}

func (x *AccountRecord) GetNodePubkey() string {
	if x != nil && x.NodePubkey != nil {
		return *x.NodePubkey
	}
	return ""
}

func (x *AccountRecord) GetCommission() int64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *AccountRecord) GetEpochCredits() []*EpochCreditRecord {
	if x != nil {
		return x.EpochCredits
	}
	return nil
}

func (x *AccountRecord) GetVotes() []*VoteRecord {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *AccountRecord) GetRootSlot() int64 {
	if x != nil && x.RootSlot != nil {
		return *x.RootSlot
	}
	return 0
}

func (x *AccountRecord) GetLastTimestamp() []*TimestampRecord {
	if x != nil {
		return x.LastTimestamp
	}
	return nil
}

func (x *AccountRecord) GetData() []*DataRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type AuthorizedVoterRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedVoter *string `protobuf:"bytes,1,opt,name=authorized_voter,json=authorizedVoter" json:"authorized_voter,omitempty"`
	Epoch           *int64  `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
}

func (x *AuthorizedVoterRecord) Reset() {
	*x = AuthorizedVoterRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedVoterRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedVoterRecord) ProtoMessage() {}

func (x *AuthorizedVoterRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedVoterRecord.ProtoReflect.Descriptor instead.
func (*AuthorizedVoterRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{9}
}

func (x *AuthorizedVoterRecord) GetAuthorizedVoter() string {
	if x != nil && x.AuthorizedVoter != nil {
		return *x.AuthorizedVoter
	}
	return ""
}

func (x *AuthorizedVoterRecord) GetEpoch() int64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

type PriorVoterRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizedPubkey            *string `protobuf:"bytes,1,opt,name=authorized_pubkey,json=authorizedPubkey" json:"authorized_pubkey,omitempty"`
	EpochOfLastAuthorizedSwitch *int64  `protobuf:"varint,2,opt,name=epoch_of_last_authorized_switch,json=epochOfLastAuthorizedSwitch" json:"epoch_of_last_authorized_switch,omitempty"`
	TargetEpoch                 *int64  `protobuf:"varint,3,opt,name=target_epoch,json=targetEpoch" json:"target_epoch,omitempty"`
}

func (x *PriorVoterRecord) Reset() {
	*x = PriorVoterRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriorVoterRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriorVoterRecord) ProtoMessage() {}

func (x *PriorVoterRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriorVoterRecord.ProtoReflect.Descriptor instead.
func (*PriorVoterRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{10}
}

func (x *PriorVoterRecord) GetAuthorizedPubkey() string {
	if x != nil && x.AuthorizedPubkey != nil {
		return *x.AuthorizedPubkey
	}
	return ""
}

func (x *PriorVoterRecord) GetEpochOfLastAuthorizedSwitch() int64 {
	if x != nil && x.EpochOfLastAuthorizedSwitch != nil {
		return *x.EpochOfLastAuthorizedSwitch
	}
	return 0
}

func (x *PriorVoterRecord) GetTargetEpoch() int64 {
	if x != nil && x.TargetEpoch != nil {
		return *x.TargetEpoch
	}
	return 0
}

type EpochCreditRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credits         *string `protobuf:"bytes,1,opt,name=credits" json:"credits,omitempty"`
	Epoch           *int64  `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	PreviousCredits *string `protobuf:"bytes,3,opt,name=previous_credits,json=previousCredits" json:"previous_credits,omitempty"`
}

func (x *EpochCreditRecord) Reset() {
	*x = EpochCreditRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochCreditRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochCreditRecord) ProtoMessage() {}

func (x *EpochCreditRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochCreditRecord.ProtoReflect.Descriptor instead.
func (*EpochCreditRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{11}
}

func (x *EpochCreditRecord) GetCredits() string {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return ""
}

func (x *EpochCreditRecord) GetEpoch() int64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *EpochCreditRecord) GetPreviousCredits() string {
	if x != nil && x.PreviousCredits != nil {
		return *x.PreviousCredits
	}
	return ""
}

type VoteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationCount *int64 `protobuf:"varint,1,opt,name=confirmation_count,json=confirmationCount" json:"confirmation_count,omitempty"`
	Slot              *int64 `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
}

func (x *VoteRecord) Reset() {
	*x = VoteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRecord) ProtoMessage() {}

func (x *VoteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRecord.ProtoReflect.Descriptor instead.
func (*VoteRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{12}
}

func (x *VoteRecord) GetConfirmationCount() int64 {
	if x != nil && x.ConfirmationCount != nil {
		return *x.ConfirmationCount
	}
	return 0
}

func (x *VoteRecord) GetSlot() int64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type TimestampRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Slot      *int64 `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
}

func (x *TimestampRecord) Reset() {
	*x = TimestampRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRecord) ProtoMessage() {}

func (x *TimestampRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRecord.ProtoReflect.Descriptor instead.
func (*TimestampRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{13}
}

func (x *TimestampRecord) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TimestampRecord) GetSlot() int64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type DataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw      *string `protobuf:"bytes,1,opt,name=raw" json:"raw,omitempty"`
	Encoding *string `protobuf:"bytes,2,opt,name=encoding" json:"encoding,omitempty"`
}

func (x *DataRecord) Reset() {
	*x = DataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRecord) ProtoMessage() {}

func (x *DataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRecord.ProtoReflect.Descriptor instead.
func (*DataRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{14}
}

func (x *DataRecord) GetRaw() string {
	if x != nil && x.Raw != nil {
		return *x.Raw
	}
	return ""
}

func (x *DataRecord) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

type TokenRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot            *int64           `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash            *string          `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp       *int64           `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	TxSignature          *string          `protobuf:"bytes,4,opt,name=tx_signature,json=txSignature" json:"tx_signature,omitempty"`
	RetrievalTimestamp   *int64           `protobuf:"varint,5,opt,name=retrieval_timestamp,json=retrievalTimestamp" json:"retrieval_timestamp,omitempty"`
	IsNft                *bool            `protobuf:"varint,6,opt,name=is_nft,json=isNft" json:"is_nft,omitempty"`
	Mint                 *string          `protobuf:"bytes,7,opt,name=mint" json:"mint,omitempty"`
	UpdateAuthority      *string          `protobuf:"bytes,8,opt,name=update_authority,json=updateAuthority" json:"update_authority,omitempty"`
	Name                 *string          `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	Symbol               *string          `protobuf:"bytes,10,opt,name=symbol" json:"symbol,omitempty"`
	Uri                  *string          `protobuf:"bytes,11,opt,name=uri" json:"uri,omitempty"`
	SellerFeeBasisPoints *uint32          `protobuf:"varint,12,opt,name=seller_fee_basis_points,json=sellerFeeBasisPoints" json:"seller_fee_basis_points,omitempty"`
	Creators             []*CreatorRecord `protobuf:"bytes,13,rep,name=creators" json:"creators,omitempty"`
	PrimarySaleHappened  *bool            `protobuf:"varint,14,opt,name=primary_sale_happened,json=primarySaleHappened" json:"primary_sale_happened,omitempty"`
	IsMutable            *bool            `protobuf:"varint,15,opt,name=is_mutable,json=isMutable" json:"is_mutable,omitempty"`
}

func (x *TokenRecord) Reset() {
	*x = TokenRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRecord) ProtoMessage() {}

func (x *TokenRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRecord.ProtoReflect.Descriptor instead.
func (*TokenRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{15}
}

func (x *TokenRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *TokenRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *TokenRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *TokenRecord) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *TokenRecord) GetRetrievalTimestamp() int64 {
	if x != nil && x.RetrievalTimestamp != nil {
		return *x.RetrievalTimestamp
	}
	return 0
}

func (x *TokenRecord) GetIsNft() bool {
	if x != nil && x.IsNft != nil {
		return *x.IsNft
	}
	return false
}

func (x *TokenRecord) GetMint() string {
	if x != nil && x.Mint != nil {
		return *x.Mint
	}
	return ""
}

func (x *TokenRecord) GetUpdateAuthority() string {
	if x != nil && x.UpdateAuthority != nil {
		return *x.UpdateAuthority
	}
	return ""
}

func (x *TokenRecord) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TokenRecord) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *TokenRecord) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *TokenRecord) GetSellerFeeBasisPoints() uint32 {
	if x != nil && x.SellerFeeBasisPoints != nil {
		return *x.SellerFeeBasisPoints
	}
	return 0
}

func (x *TokenRecord) GetCreators() []*CreatorRecord {
	if x != nil {
		return x.Creators
	}
	return nil
}

func (x *TokenRecord) GetPrimarySaleHappened() bool {
	if x != nil && x.PrimarySaleHappened != nil {
		return *x.PrimarySaleHappened
	}
	return false
}

func (x *TokenRecord) GetIsMutable() bool {
	if x != nil && x.IsMutable != nil {
		return *x.IsMutable
	}
	return false
}

type CreatorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  *string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Verified *bool   `protobuf:"varint,2,opt,name=verified" json:"verified,omitempty"`
	Share    *int64  `protobuf:"varint,3,opt,name=share" json:"share,omitempty"`
}

func (x *CreatorRecord) Reset() {
	*x = CreatorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatorRecord) ProtoMessage() {}

func (x *CreatorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatorRecord.ProtoReflect.Descriptor instead.
func (*CreatorRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{16}
}

func (x *CreatorRecord) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CreatorRecord) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *CreatorRecord) GetShare() int64 {
	if x != nil && x.Share != nil {
		return *x.Share
	}
	return 0
}

type TokenTransferRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSlot      *int64  `protobuf:"varint,1,opt,name=block_slot,json=blockSlot" json:"block_slot,omitempty"`
	BlockHash      *string `protobuf:"bytes,2,opt,name=block_hash,json=blockHash" json:"block_hash,omitempty"`
	BlockTimestamp *int64  `protobuf:"varint,3,opt,name=block_timestamp,json=blockTimestamp" json:"block_timestamp,omitempty"`
	TxSignature    *string `protobuf:"bytes,4,opt,name=tx_signature,json=txSignature" json:"tx_signature,omitempty"`
	Source         *string `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	Destination    *string `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	Authority      *string `protobuf:"bytes,7,opt,name=authority" json:"authority,omitempty"`
	Value          *uint64 `protobuf:"varint,8,opt,name=value" json:"value,omitempty"`
	Fee            *uint64 `protobuf:"varint,9,opt,name=fee" json:"fee,omitempty"`
	FeeDecimals    *uint64 `protobuf:"varint,10,opt,name=fee_decimals,json=feeDecimals" json:"fee_decimals,omitempty"`
	Memo           *string `protobuf:"bytes,11,opt,name=memo" json:"memo,omitempty"`
	Decimals       *uint64 `protobuf:"varint,12,opt,name=decimals" json:"decimals,omitempty"`
	Mint           *string `protobuf:"bytes,13,opt,name=mint" json:"mint,omitempty"`
	MintAuthority  *string `protobuf:"bytes,14,opt,name=mint_authority,json=mintAuthority" json:"mint_authority,omitempty"`
	TransferType   *string `protobuf:"bytes,15,opt,name=transfer_type,json=transferType" json:"transfer_type,omitempty"`
}

func (x *TokenTransferRecord) Reset() {
	*x = TokenTransferRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenTransferRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransferRecord) ProtoMessage() {}

func (x *TokenTransferRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransferRecord.ProtoReflect.Descriptor instead.
func (*TokenTransferRecord) Descriptor() ([]byte, []int) {
	return file_records_proto_rawDescGZIP(), []int{17}
}

func (x *TokenTransferRecord) GetBlockSlot() int64 {
	if x != nil && x.BlockSlot != nil {
		return *x.BlockSlot
	}
	return 0
}

func (x *TokenTransferRecord) GetBlockHash() string {
	if x != nil && x.BlockHash != nil {
		return *x.BlockHash
	}
	return ""
}

func (x *TokenTransferRecord) GetBlockTimestamp() int64 {
	if x != nil && x.BlockTimestamp != nil {
		return *x.BlockTimestamp
	}
	return 0
}

func (x *TokenTransferRecord) GetTxSignature() string {
	if x != nil && x.TxSignature != nil {
		return *x.TxSignature
	}
	return ""
}

func (x *TokenTransferRecord) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *TokenTransferRecord) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *TokenTransferRecord) GetAuthority() string {
	if x != nil && x.Authority != nil {
		return *x.Authority
	}
	return ""
}

func (x *TokenTransferRecord) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *TokenTransferRecord) GetFee() uint64 {
	if x != nil && x.Fee != nil {
		return *x.Fee
	}
	return 0
}

func (x *TokenTransferRecord) GetFeeDecimals() uint64 {
	if x != nil && x.FeeDecimals != nil {
		return *x.FeeDecimals
	}
	return 0
}

func (x *TokenTransferRecord) GetMemo() string {
	if x != nil && x.Memo != nil {
		return *x.Memo
	}
	return ""
}

func (x *TokenTransferRecord) GetDecimals() uint64 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

func (x *TokenTransferRecord) GetMint() string {
	if x != nil && x.Mint != nil {
		return *x.Mint
	}
	return ""
}

func (x *TokenTransferRecord) GetMintAuthority() string {
	if x != nil && x.MintAuthority != nil {
		return *x.MintAuthority
	}
	return ""
}

func (x *TokenTransferRecord) GetTransferType() string {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return ""
}

var File_records_proto protoreflect.FileDescriptor

var file_records_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x92,
	0x02, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54,
	0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x36, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x09, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x53, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x47, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54, 0x4c, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x22, 0xa8, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x6e, 0x0a, 0x11, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x0a, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x43, 0x0a, 0x0f,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa2, 0x04,
	0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e,
	0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x66, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x35, 0x0a, 0x17,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x65, 0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x45, 0x54,
	0x4c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x61, 0x6c, 0x65, 0x48, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22,
	0xd2, 0x03, 0x0a, 0x13, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_records_proto_rawDescOnce sync.Once
	file_records_proto_rawDescData = file_records_proto_rawDesc
)

func file_records_proto_rawDescGZIP() []byte {
	file_records_proto_rawDescOnce.Do(func() {
		file_records_proto_rawDescData = protoimpl.X.CompressGZIP(file_records_proto_rawDescData)
	})
	return file_records_proto_rawDescData
}

var file_records_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_records_proto_goTypes = []interface{}{
	(*BlockRecord)(nil),              // 0: solanaETL.block.BlockRecord
	(*BlockRewardRecord)(nil),        // 1: solanaETL.block.BlockRewardRecord
	(*TransactionRecord)(nil),        // 2: solanaETL.block.TransactionRecord
	(*TransactionAccountRecord)(nil), // 3: solanaETL.block.TransactionAccountRecord
	(*BalanceChangeRecord)(nil),      // 4: solanaETL.block.BalanceChangeRecord
	(*TokenBalanceRecord)(nil),       // 5: solanaETL.block.TokenBalanceRecord
	(*InstructionRecord)(nil),        // 6: solanaETL.block.InstructionRecord
	(*ParamsRecord)(nil),             // 7: solanaETL.block.ParamsRecord
	(*AccountRecord)(nil),            // 8: solanaETL.block.AccountRecord
	(*AuthorizedVoterRecord)(nil),    // 9: solanaETL.block.AuthorizedVoterRecord
	(*PriorVoterRecord)(nil),         // 10: solanaETL.block.PriorVoterRecord
	(*EpochCreditRecord)(nil),        // 11: solanaETL.block.EpochCreditRecord
	(*VoteRecord)(nil),               // 12: solanaETL.block.VoteRecord
	(*TimestampRecord)(nil),          // 13: solanaETL.block.TimestampRecord
	(*DataRecord)(nil),               // 14: solanaETL.block.DataRecord
	(*TokenRecord)(nil),              // 15: solanaETL.block.TokenRecord
	(*CreatorRecord)(nil),            // 16: solanaETL.block.CreatorRecord
	(*TokenTransferRecord)(nil),      // 17: solanaETL.block.TokenTransferRecord
}
var file_records_proto_depIdxs = []int32{
	3,  // 0: solanaETL.block.TransactionRecord.accounts:type_name -> solanaETL.block.TransactionAccountRecord
	4,  // 1: solanaETL.block.TransactionRecord.balance_changes:type_name -> solanaETL.block.BalanceChangeRecord
	5,  // 2: solanaETL.block.TransactionRecord.pre_token_balances:type_name -> solanaETL.block.TokenBalanceRecord
	5,  // 3: solanaETL.block.TransactionRecord.post_token_balances:type_name -> solanaETL.block.TokenBalanceRecord
	7,  // 4: solanaETL.block.InstructionRecord.params:type_name -> solanaETL.block.ParamsRecord
	9,  // 5: solanaETL.block.AccountRecord.authorized_voters:type_name -> solanaETL.block.AuthorizedVoterRecord
	10, // 6: solanaETL.block.AccountRecord.prior_voters:type_name -> solanaETL.block.PriorVoterRecord
	11, // 7: solanaETL.block.AccountRecord.epoch_credits:type_name -> solanaETL.block.EpochCreditRecord
	12, // 8: solanaETL.block.AccountRecord.votes:type_name -> solanaETL.block.VoteRecord
	13, // 9: solanaETL.block.AccountRecord.last_timestamp:type_name -> solanaETL.block.TimestampRecord
	14, // 10: solanaETL.block.AccountRecord.data:type_name -> solanaETL.block.DataRecord
	16, // 11: solanaETL.block.TokenRecord.creators:type_name -> solanaETL.block.CreatorRecord
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_records_proto_init() }
func file_records_proto_init() {
	if File_records_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_records_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRewardRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAccountRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChangeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedVoterRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriorVoterRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochCreditRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenTransferRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_records_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_records_proto_goTypes,
		DependencyIndexes: file_records_proto_depIdxs,
		MessageInfos:      file_records_proto_msgTypes,
	}.Build()
	File_records_proto = out.File
	file_records_proto_rawDesc = nil
	file_records_proto_goTypes = nil
	file_records_proto_depIdxs = nil
}
